@page "/display/crashes"
@page "/display"
@inherits OwningComponentBase<ICrashRepository>
@inject InferenceSession session

<div class="col-3">

    <div class="form-group">
        <label>Start Date</label>
        <input class="form-control" type="datetime-local" value="@startdate" @onchange="@UpdateStartDate" min="2016-01-01T00:00" />
    </div>
    <div class="form-group">
        <label>End Date</label>
        <input class="form-control" type="datetime-local" value="@enddate" @onchange="@UpdateEndDate" />
    </div>
    <div class="form-group">
        <label>City</label>
        <select class="form-control" @onchange="@UpdateCity">
            @if (Cities?.Count() > 0)
            {
                <option value="all">All</option>
                @foreach (string city in Cities)
                {
                    <option value="@city">@city</option>
                }
            }
            else
            {
                <option value="">Loading...</option>
            }

        </select>
    </div>
    <div class="form-group">
        <label>County</label>
        <select class="form-control" @onchange="@UpdateCounty">
            @if (Counties?.Count() > 0)
            {
                <option value="all">All</option>
                @foreach (string county in Counties)
                {
                    <option value="@county">@county</option>
                }
            }
            else
            {
                <option value="">Loading...</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label>Crash Severity</label>
        <select class="form-control" @onchange="@UpdateCrashSeverity">
            <option value="0">All</option>
            <option value="1">No injury/PDO</option>
            <option value="2">Possible injury</option>
            <option value="3">Suspected Minor Injury</option>
            <option value="4">Suspected Serious Injury</option>
            <option value="5">Fatal</option>
        </select>
    </div>
    <div class="form-group">
        <label>Pedestrian Involved</label>
        <input type="checkbox" @onchange="@UpdatePedestrianInvolved" />
    </div>
    <div class="form-group">
        <label>Bicyclist Involved</label>
        <input type="checkbox" @onchange="@UpdateBicyclistInvolved" />
    </div>
    <div class="form-group">
        <label>Motorcycle Involved</label>
        <input type="checkbox" @onchange="@UpdateMotorcycleInvolved" />
    </div>
    <div class="form-group">
        <label>Improper Restraint</label>
        <input type="checkbox" @onchange="@UpdateImproperRestraint" />
    </div>
    <div class="form-group">
        <label>Unrestrained</label>
        <input type="checkbox" @onchange="@UpdateUnrestrained" />
    </div>
    <div class="form-group">
        <label>DUI</label>
        <input type="checkbox" @onchange="@UpdateDUI" />
    </div>
    <div class="form-group">
        <label>Intersection Related</label>
        <input type="checkbox" @onchange="@UpdateIntersectionRelated" />
    </div>
    <div class="form-group">
        <label>Wild Animal Related</label>
        <input type="checkbox" @onchange="@UpdateWildAnimalRelated" />
    </div>
    <div class="form-group">
        <label>Domestic Animal Related</label>
        <input type="checkbox" @onchange="@UpdateDomesticAnimalRelated" />
    </div>
    <div class="form-group">
        <label>Overturn/Rollover</label>
        <input type="checkbox" @onchange="@UpdateOverturnRollover" />
    </div>
    <div class="form-group">
        <label>Commercial Motor Vehicle Involved</label>
        <input type="checkbox" @onchange="@UpdateCommercialMotorVehInvolved" />
    </div>
    <div class="form-group">
        <label>Teenage Driver Involved</label>
        <input type="checkbox" @onchange="@UpdateTeenageDriverInvolved" />
    </div>
    <div class="form-group">
        <label>Older Driver Involved</label>
        <input type="checkbox" @onchange="@UpdateOlderDriverInvolved" />
    </div>
    <div class="form-group">
        <label>Night/Dark Conditions</label>
        <input type="checkbox" @onchange="@UpdateNightDarkCondition" />
    </div>
    <div class="form-group">
        <label>Single Vehicle</label>
        <input type="checkbox" @onchange="@UpdateSingleVehicle" />
    </div>
    <div class="form-group">
        <label>Distracted Driving</label>
        <input type="checkbox" @onchange="@UpdateDistractedDriving" />
    </div>
    <div class="form-group">
        <label>Drowsy Driving</label>
        <input type="checkbox" @onchange="@UpdateDrowsyDriving" />
    </div>
    <div class="form-group">
        <label>Roadway Departure</label>
        <input type="checkbox" @onchange="@UpdateRoadwayDeparture" />
    </div>
</div>

<div class="col-9 text-center">

    <div class="form-group">
        <label>Results per Page: </label>
        <select @onchange="@UpdatePageSize">
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="75">75</option>
            <option value="100">100</option>
        </select>
        <p class="float-right">Predicted Crash Severity: @predictedVal</p>
    </div>

    <h2>Utah Crash Data</h2>
    @if (CrashData?.Count() > 0)
    {
        @foreach (Crash c in CrashData)
        {
            var x = "";

            if (c.CRASH_SEVERITY_ID == 1)
            {
                x = "No Injury/PDO";
            }
            else if (c.CRASH_SEVERITY_ID == 2)
            {
                x = "Possible Injury";
            }
            else if (c.CRASH_SEVERITY_ID == 3)
            {
                x = "Suspected Minor Injury";
            }
            else if (c.CRASH_SEVERITY_ID == 4)
            {
                x = "Suspected Serious Injury";
            }
            else
            {
                x = "Fatal";
            }

         <CardsTable c="@c" x="@x"></CardsTable>

        }
    }
    else
    {

        <p colespan="5" class="text-center">No Crashes</p>

    }

    <br />
    <div class="float-right">
        <button class="btn btn-outline-primary" @onclick="@First">Page 1</button>
        <button class="btn btn-outline-primary" @onclick="@Previous">Previous</button>
        <button class="btn btn-primary">Page @pageNum</button>
        <button class="btn btn-outline-primary" @onclick="@Next">Next</button>
        <button class="btn btn-outline-primary" @onclick="@Last">Page @totalPages</button>
    </div>
</div>



@code {

    public ICrashRepository repo => Service;
    public IEnumerable<Crash> CrashData { get; set; }
    public Crash_pred data { get; set; } = new Crash_pred();
    public Prediction prediction { get; set; }
    public string predictedVal { get; set; } = "No Injury/PDO";

    private int totalPages;
    private int pageSize = 25;
    private int pageNum = 1;
    public IEnumerable<string> Cities { get; set; }
    public IEnumerable<string> Counties { get; set; }

    private DateTime StartDate { get; set; } = Convert.ToDateTime("2016-01-01T00:00");
    private DateTime EndDate { get; set; } = DateTime.Now;
    private string startdate { get; set; }
    private string enddate { get; set; }

    private string City { get; set; }
    private string County { get; set; }
    private int CrashSeverity { get; set; }
    private bool PedestrianInvolved { get; set; }
    private bool BicyclistInvolved { get; set; }
    private bool MotorcycleInvolved { get; set; }
    private bool ImproperRestraint { get; set; }
    private bool Unrestrained { get; set; }
    private bool DUI { get; set; }
    private bool IntersectionRelated { get; set; }
    private bool WildAnimalRelated { get; set; }
    private bool DomesticAnimalRelated { get; set; }
    private bool OverturnRollover { get; set; }
    private bool CommercialMotorVehInvolved { get; set; }
    private bool TeenageDriverInvolved { get; set; }
    private bool OlderDriverInvolved { get; set; }
    private bool NightDarkCondition { get; set; }
    private bool SingleVehicle { get; set; }
    private bool DistractedDriving { get; set; }
    private bool DrowsyDriving { get; set; }
    private bool RoadwayDeparture { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
        await GetLists();
    }

    public async Task UpdateData()
    {
        startdate = StartDate.ToString("yyyy-MM-dd HH:mm:ss").Replace(' ', 'T');
        enddate = EndDate.ToString("yyyy-MM-dd HH:mm:ss").Replace(' ', 'T');
        CrashData = await repo.Crashes
            .Where(c => c.CRASH_DATETIME > StartDate || StartDate == null)
            .Where(c => c.CRASH_DATETIME < EndDate || EndDate == null)
            .Where(c => c.CITY == City || City == null)
            .Where(c => c.COUNTY_NAME == County || County == null)
            .Where(c => c.CRASH_SEVERITY_ID == CrashSeverity || CrashSeverity == 0)
            .Where(c => c.PEDESTRIAN_INVOLVED == PedestrianInvolved || PedestrianInvolved == false)
            .Where(c => c.BICYCLIST_INVOLVED == BicyclistInvolved || BicyclistInvolved == false)
            .Where(c => c.MOTORCYCLE_INVOLVED == MotorcycleInvolved || MotorcycleInvolved == false)
            .Where(c => c.IMPROPER_RESTRAINT == ImproperRestraint || ImproperRestraint == false)
            .Where(c => c.UNRESTRAINED == Unrestrained || Unrestrained == false)
            .Where(c => c.DUI == DUI || DUI == false)
            .Where(c => c.INTERSECTION_RELATED == IntersectionRelated || IntersectionRelated == false)
            .Where(c => c.WILD_ANIMAL_RELATED == WildAnimalRelated || WildAnimalRelated == false)
            .Where(c => c.DOMESTIC_ANIMAL_RELATED == DomesticAnimalRelated || DomesticAnimalRelated == false)
            .Where(c => c.OVERTURN_ROLLOVER == OverturnRollover || OverturnRollover == false)
            .Where(c => c.COMMERCIAL_MOTOR_VEH_INVOLVED == CommercialMotorVehInvolved || CommercialMotorVehInvolved == false)
            .Where(c => c.TEENAGE_DRIVER_INVOLVED == TeenageDriverInvolved || TeenageDriverInvolved == false)
            .Where(c => c.OLDER_DRIVER_INVOLVED == OlderDriverInvolved || OlderDriverInvolved == false)
            .Where(c => c.NIGHT_DARK_CONDITION == NightDarkCondition || NightDarkCondition == false)
            .Where(c => c.SINGLE_VEHICLE == SingleVehicle || SingleVehicle == false)
            .Where(c => c.DISTRACTED_DRIVING == DistractedDriving || DistractedDriving == false)
            .Where(c => c.DROWSY_DRIVING == DrowsyDriving || DrowsyDriving == false)
            .Where(c => c.ROADWAY_DEPARTURE == RoadwayDeparture || RoadwayDeparture == false)
            .Skip((pageNum - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();
        totalPages = (int)Math.Ceiling((double)repo.Crashes
            .Where(c => c.CRASH_DATETIME > StartDate || StartDate == null)
            .Where(c => c.CRASH_DATETIME < EndDate || EndDate == null)
            .Where(c => c.CITY == City || City == null)
            .Where(c => c.COUNTY_NAME == County || County == null)
            .Where(c => c.CRASH_SEVERITY_ID == CrashSeverity || CrashSeverity == 0)
            .Where(c => c.PEDESTRIAN_INVOLVED == PedestrianInvolved || PedestrianInvolved == false)
            .Where(c => c.BICYCLIST_INVOLVED == BicyclistInvolved || BicyclistInvolved == false)
            .Where(c => c.MOTORCYCLE_INVOLVED == MotorcycleInvolved || MotorcycleInvolved == false)
            .Where(c => c.IMPROPER_RESTRAINT == ImproperRestraint || ImproperRestraint == false)
            .Where(c => c.UNRESTRAINED == Unrestrained || Unrestrained == false)
            .Where(c => c.DUI == DUI || DUI == false)
            .Where(c => c.INTERSECTION_RELATED == IntersectionRelated || IntersectionRelated == false)
            .Where(c => c.WILD_ANIMAL_RELATED == WildAnimalRelated || WildAnimalRelated == false)
            .Where(c => c.DOMESTIC_ANIMAL_RELATED == DomesticAnimalRelated || DomesticAnimalRelated == false)
            .Where(c => c.OVERTURN_ROLLOVER == OverturnRollover || OverturnRollover == false)
            .Where(c => c.COMMERCIAL_MOTOR_VEH_INVOLVED == CommercialMotorVehInvolved || CommercialMotorVehInvolved == false)
            .Where(c => c.TEENAGE_DRIVER_INVOLVED == TeenageDriverInvolved || TeenageDriverInvolved == false)
            .Where(c => c.OLDER_DRIVER_INVOLVED == OlderDriverInvolved || OlderDriverInvolved == false)
            .Where(c => c.NIGHT_DARK_CONDITION == NightDarkCondition || NightDarkCondition == false)
            .Where(c => c.SINGLE_VEHICLE == SingleVehicle || SingleVehicle == false)
            .Where(c => c.DISTRACTED_DRIVING == DistractedDriving || DistractedDriving == false)
            .Where(c => c.DROWSY_DRIVING == DrowsyDriving || DrowsyDriving == false)
            .Where(c => c.ROADWAY_DEPARTURE == RoadwayDeparture || RoadwayDeparture == false).Count() / pageSize);

        var result = session.Run(new List<NamedOnnxValue>
            {
                NamedOnnxValue.CreateFromTensor("float_input", data.AsTensor())
            });

        Tensor<string> score = result.First().AsTensor<string>();
        prediction = new Prediction { PredictedValue = score.Last() };

        if (prediction.PredictedValue == "1")
        {
            predictedVal = "No Injury/PDO";
        }
        else if (prediction.PredictedValue == "2")
        {
            predictedVal = "Possible Injury";
        }
        else if (prediction.PredictedValue == "3")
        {
            predictedVal = "Suspected Minor Injury";
        }
        else if (prediction.PredictedValue == "4")
        {
            predictedVal = "Suspected Serious Injury";
        }
        else
        {
            predictedVal = "Fatal";
        }

        if (CrashSeverity == 0)
        {
            predictedVal = predictedVal;
        }
        else if (CrashSeverity == 1)
        {
            predictedVal = "No Injury/PDO";
        }
        else if (CrashSeverity == 2)
        {
            predictedVal = "Possible Injury";
        }
        else if (CrashSeverity == 3)
        {
            predictedVal = "Suspected Minor Injury";
        }
        else if (CrashSeverity == 4)
        {
            predictedVal = "Suspected Serious Injury";
        }
        else
        {
            predictedVal = "Fatal";
        }

        result.Dispose();
    }

    public async Task UpdatePageSize(ChangeEventArgs args)
    {
        pageSize = Convert.ToInt32(args.Value);
        await UpdateData();
    }

    public async Task UpdateStartDate(ChangeEventArgs args)
    {
        StartDate = Convert.ToDateTime(args.Value);
        await UpdateData();

    }

    public async Task UpdateEndDate(ChangeEventArgs args)
    {
        EndDate = Convert.ToDateTime(args.Value);
        await UpdateData();

    }

    public async Task UpdateCity(ChangeEventArgs args)
    {
        City = args.Value.ToString();
        if (City == "all")
        {
            City = null;
            data.city_Salt_Lake_City = 0;
            data.city_Other = 0;
            data.city_West_Valley_City = 0;
        }
        else if (City == "SALT LAKE CITY")
        {
            data.city_Salt_Lake_City = 1;
            data.city_Other = 0;
            data.city_West_Valley_City = 0;
        }
        else if (City == "WEST VALLEY CITY")
        {
            data.city_Salt_Lake_City = 0;
            data.city_Other = 0;
            data.city_West_Valley_City = 1;
        }
        else
        {
            data.city_Salt_Lake_City = 0;
            data.city_Other = 1;
            data.city_West_Valley_City = 0;
        }
        await UpdateData();
    }

    public async Task UpdateCounty(ChangeEventArgs args)
    {
        County = args.Value.ToString();
        if (County == "all")
        {
            County = null;
            data.county_name_Salt_Lake = 0;
            data.county_name_UTAH = 0;
            data.county_name_Weber = 0;
            data.county_name_Other = 0;
        }
        else if (County == "SALT LAKE")
        {
            data.county_name_Salt_Lake = 1;
            data.county_name_UTAH = 0;
            data.county_name_Weber = 0;
            data.county_name_Other = 0;
        }
        else if (County == "UTAH")
        {
            data.county_name_Salt_Lake = 0;
            data.county_name_UTAH = 1;
            data.county_name_Weber = 0;
            data.county_name_Other = 0;
        }
        else if (County == "WEBER")
        {
            data.county_name_Salt_Lake = 0;
            data.county_name_UTAH = 0;
            data.county_name_Weber = 1;
            data.county_name_Other = 0;
        }
        else
        {
            data.county_name_Salt_Lake = 0;
            data.county_name_UTAH = 0;
            data.county_name_Weber = 0;
            data.county_name_Other = 1;
        }
        await UpdateData();
    }

    public async Task UpdateCrashSeverity(ChangeEventArgs args)
    {
        CrashSeverity = Convert.ToInt32(args.Value);
        await UpdateData();
    }

    public async Task UpdatePedestrianInvolved(ChangeEventArgs args)
    {
        PedestrianInvolved = Convert.ToBoolean(args.Value);
        await UpdateData();
    }

    public async Task UpdateBicyclistInvolved(ChangeEventArgs args)
    {
        BicyclistInvolved = Convert.ToBoolean(args.Value);
        await UpdateData();
    }

    public async Task UpdateMotorcycleInvolved(ChangeEventArgs args)
    {
        MotorcycleInvolved = Convert.ToBoolean(args.Value);
        await UpdateData();
    }

    public async Task UpdateImproperRestraint(ChangeEventArgs args)
    {
        ImproperRestraint = Convert.ToBoolean(args.Value);
        await UpdateData();
    }

    public async Task UpdateUnrestrained(ChangeEventArgs args)
    {
        Unrestrained = Convert.ToBoolean(args.Value);
        await UpdateData();
    }

    public async Task UpdateDUI(ChangeEventArgs args)
    {
        DUI = Convert.ToBoolean(args.Value);
        await UpdateData();
    }

    public async Task UpdateIntersectionRelated(ChangeEventArgs args)
    {
        IntersectionRelated = Convert.ToBoolean(args.Value);
        if (IntersectionRelated)
        {
            data.intersection_related = 1;
        }
        else
        {
            data.intersection_related = 0;
        }
        await UpdateData();
    }

    public async Task UpdateWildAnimalRelated(ChangeEventArgs args)
    {
        WildAnimalRelated = Convert.ToBoolean(args.Value);
        await UpdateData();
    }

    public async Task UpdateDomesticAnimalRelated(ChangeEventArgs args)
    {
        DomesticAnimalRelated = Convert.ToBoolean(args.Value);
        await UpdateData();
    }

    public async Task UpdateOverturnRollover(ChangeEventArgs args)
    {
        OverturnRollover = Convert.ToBoolean(args.Value);
        await UpdateData();
    }

    public async Task UpdateCommercialMotorVehInvolved(ChangeEventArgs args)
    {
        CommercialMotorVehInvolved = Convert.ToBoolean(args.Value);
        if (CommercialMotorVehInvolved)
        {
            data.commercial_motor_veh_involved = 1;
        }
        else
        {
            data.commercial_motor_veh_involved = 0;
        }
        await UpdateData();
    }

    public async Task UpdateTeenageDriverInvolved(ChangeEventArgs args)
    {
        TeenageDriverInvolved = Convert.ToBoolean(args.Value);
        if (TeenageDriverInvolved)
        {
            data.teenage_driver_involved = 1;
        }
        else
        {
            data.teenage_driver_involved = 0;
        }
        await UpdateData();
    }

    public async Task UpdateOlderDriverInvolved(ChangeEventArgs args)
    {
        OlderDriverInvolved = Convert.ToBoolean(args.Value);
        if (OlderDriverInvolved)
        {
            data.older_driver_involved = 1;
        }
        else
        {
            data.older_driver_involved = 0;
        }
        await UpdateData();
    }

    public async Task UpdateNightDarkCondition(ChangeEventArgs args)
    {
        NightDarkCondition = Convert.ToBoolean(args.Value);
        if (NightDarkCondition)
        {
            data.night_dark_condition = 1;
        }
        else
        {
            data.night_dark_condition = 0;
        }
        await UpdateData();
    }

    public async Task UpdateSingleVehicle(ChangeEventArgs args)
    {
        SingleVehicle = Convert.ToBoolean(args.Value);
        if (SingleVehicle)
        {
            data.single_vehicle = 1;
        }
        else
        {
            data.single_vehicle = 0;
        }
        await UpdateData();
    }

    public async Task UpdateDistractedDriving(ChangeEventArgs args)
    {
        DistractedDriving = Convert.ToBoolean(args.Value);
        if (DistractedDriving)
        {
            data.distracted_driving = 1;
        }
        else
        {
            data.distracted_driving = 0;
        }
        await UpdateData();
    }

    public async Task UpdateDrowsyDriving(ChangeEventArgs args)
    {
        DrowsyDriving = Convert.ToBoolean(args.Value);
        await UpdateData();
    }

    public async Task UpdateRoadwayDeparture(ChangeEventArgs args)
    {
        RoadwayDeparture = Convert.ToBoolean(args.Value);
        if (RoadwayDeparture)
        {
            data.roadway_departure = 1;
        }
        else
        {
            data.roadway_departure = 0;
        }
        await UpdateData();
    }

    public async Task GetLists()
    {
        Cities = await repo.Crashes.Select(c => c.CITY).Distinct().OrderBy(c => c).ToListAsync();
        Counties = await repo.Crashes.Select(c => c.COUNTY_NAME).Distinct().OrderBy(c => c).ToListAsync();
    }

    public string GetDetailsUrl(long id) => $"/admin/crashes/details/{id}";
    public string GetEditUrl(long id) => $"/admin/crashes/edit/{id}";

    public async Task RemoveCrash(Crash c)
    {
        repo.DeleteCrash(c);
        await UpdateData();
    }

    public async Task Next()
    {
        if (pageNum != totalPages)
        {
            pageNum = pageNum + 1;
        }
        await UpdateData();
    }

    public async Task Previous()
    {
        if (pageNum != 1)
        {
            pageNum = pageNum - 1;
        }
        await UpdateData();
    }

    public async Task First()
    {
        if (pageNum != 1)
        {
            pageNum = 1;
        }
        await UpdateData();
    }

    public async Task Last()
    {
        if (pageNum != totalPages)
        {
            pageNum = totalPages;
        }
        await UpdateData();
    }

}